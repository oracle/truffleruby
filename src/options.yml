LANGUAGE_OPTIONS:
- FROZEN_STRING_LITERALS
- BACKTRACES_OMIT_UNUSED
- LAZY_TRANSLATION_USER
- LAZY_TRANSLATION_CORE
- CHAOS_DATA
- LAZY_TRANSLATION_LOG
- LOG_DYNAMIC_CONSTANT_LOOKUP
- PROFILE_ARGUMENTS
- DEFAULT_LAZY
- LAZY_CALLTARGETS
- BASICOPS_INLINE
- LAZY_BUILTINS
- SHARED_OBJECTS_ENABLED
- SHARED_OBJECTS_DEBUG
- SHARED_OBJECTS_FORCE
- CORE_AS_INTERNAL
- STDLIB_AS_INTERNAL
- CORE_LOAD_PATH
- REGEXP_INSTRUMENT_CREATION
- ARRAY_UNINITIALIZED_SIZE
- PACK_RECOVER_LOOP_MIN
- PACK_UNROLL_LIMIT
- COVERAGE_GLOBAL
- BIG_HASH_STRATEGY_IS_BUCKETS
# Inline cache sizes
- DEFAULT_CACHE
- METHOD_LOOKUP_CACHE
- DISPATCH_CACHE
- YIELD_CACHE
- IS_A_CACHE
- BIND_CACHE
- CONSTANT_CACHE
- INSTANCE_VARIABLE_CACHE
- BINDING_LOCAL_VARIABLE_CACHE
- SYMBOL_TO_PROC_CACHE
- PACK_CACHE
- UNPACK_CACHE
- EVAL_CACHE
- ENCODING_COMPATIBLE_QUERY_CACHE
- ENCODING_LOADED_CLASSES_CACHE
- INTEROP_CONVERT_CACHE
- TIME_FORMAT_CACHE
- POW_CACHE
- CONTEXT_SPECIFIC_IDENTITY_CACHE
- IDENTITY_CACHE
- CLASS_CACHE
- ARRAY_DUP_CACHE
- ARRAY_STRATEGY_CACHE
# Other
- EXPERIMENTAL_ENGINE_CACHING
- RUN_TWICE
- CHECK_CLONE_UNINITIALIZED_CORRECTNESS
- ALWAYS_CLONE_ALL
- BUILDING_CORE_CEXTS
- INSTRUMENT_ALL_NODES

USER:
  STABLE:
    # Options corresponding to MRI options, which are also useful outside the TruffleRuby launcher
    LOAD_PATHS: [[load-paths, -I], string-array, '<path>,<path>,...', Load paths]
    REQUIRED_LIBRARIES: [[required-libraries, -r], string-array, '<path>,<path>,...', Required libraries]
    WORKING_DIRECTORY: [[working-directory, -C], string, '.', Interpreter will switch to this directory]
    DEBUG: [[debug, -d], boolean, false, 'Sets $DEBUG to this value']
    VERBOSITY: [[verbose, -v, -w, -W], enum/verbosity, false, 'Sets $VERBOSE to this value']
    SOURCE_ENCODING: [[source-encoding, -K], string, 'UTF-8', Source encoding]
    INTERNAL_ENCODING: [[internal-encoding, -E, -U], string, ['', '<nil>'], Internal encoding]
    EXTERNAL_ENCODING: [[external-encoding, -E], string, ['', '<locale>'], External encoding]
    BACKTRACE_LIMIT: [[backtrace-limit], integer, -1, limit the maximum length of backtrace displayed]

EXPERT:
  EXPERIMENTAL:
    # Setting home and launcher, useful for embedding
    LAUNCHER: [launcher, string, ['', '<set by launcher>'], The location of the TruffleRuby launcher program]
    CORE_LOAD_PATH: [core-load-path, string, ['resource:/truffleruby', '<path, default is from cache>'], Location to load the Truffle core library from]

    # CRuby features (--enable/disable-FEATURE), also exposed as options so they can be used outside the Ruby launcher
    FROZEN_STRING_LITERALS: [frozen-string-literals, boolean, false, Use frozen string literals]
    RUBYGEMS: [rubygems, boolean, true, Use RubyGems]
    DID_YOU_MEAN: [did-you-mean, boolean, true, Use did_you_mean]

    # Control lazy behavior
    DEFAULT_LAZY: [lazy-default, boolean, true, Enable default lazy options]
    LAZY_CALLTARGETS: [lazy-calltargets, boolean, ['singleContext && ', DEFAULT_LAZY], Create CallTargets lazily when possible]
    LAZY_RUBYGEMS: [lazy-rubygems, boolean, ['RUBYGEMS && ', DEFAULT_LAZY], Load RubyGems lazily on first failing require]

    # Embedding options
    # It would be tempting to make these language options, but that does not work because the pre-initialized context is created with (isNativeAccessAllowed=false, embedded=true)
    # and it must be compatible (to be reused) with the runtime context created from the truffleruby launcher, which is (isNativeAccessAllowed=true, embedded=false).
    EMBEDDED: [embedded, boolean, true, 'Set default options for an embedded use of TruffleRuby, rather than top-level use']
    NATIVE_PLATFORM: [platform-native, boolean, ['env.isNativeAccessAllowed() && ', true], Enables native calls via Truffle NFI for internal functionality]
    NATIVE_INTERRUPT: [platform-native-interrupt, boolean, NATIVE_PLATFORM, Use the SIGVTALRM signal to interrupt native blocking calls]
    HANDLE_INTERRUPT: [platform-handle-interrupt, boolean, '!EMBEDDED', Handle the interrupt signal and raise an Interrupt exception]
    SINGLE_THREADED: [single-threaded, boolean, ['!env.isCreateThreadAllowed() || ', EMBEDDED], Use only a single thread to be compatible with languages not supporting multithreading]
    POLYGLOT_STDIO: [polyglot-stdio, boolean, EMBEDDED || !NATIVE_PLATFORM, Use standard IO streams from the Graal-SDK polyglot API configuration]
    HOST_INTEROP: [interop-host, boolean, ['env.isHostLookupAllowed() && ', true], Allow interoperability with the host language (Java)]

    # Ruby-level features
    TRACE_CALLS: [trace-calls, boolean, true, 'Support tracing (set_trace_func, TracePoint) of method calls']
    COVERAGE_GLOBAL: [coverage-global, boolean, false, Run coverage for all code and print results on exit]

    # Options helpful for debugging, potentially also for user code
    CORE_AS_INTERNAL: [core-as-internal, boolean, false, 'Mark core library sources as internal']
    STDLIB_AS_INTERNAL: [stdlib-as-internal, boolean, false, 'Mark stdlib sources as internal']
    LAZY_TRANSLATION_USER: [lazy-translation-user, boolean, LAZY_CALLTARGETS, 'Lazily translation of stdlib, gem and user source files']
    PATCHING: [patching, boolean, true, Use patching]
    HASHING_DETERMINISTIC: [hashing-deterministic, boolean, false, Produce deterministic hash values]
    VIRTUAL_THREAD_FIBERS: [virtual-thread-fibers, boolean, false, 'Use VirtualThread for Fibers']
    LOG_SUBPROCESS: [log-subprocess, boolean, false, 'Log whenever a subprocess is created'] # Also see --log-process-args
    WARN_LOCALE: [warn-locale, boolean, true, 'Warn when the system locale is not set properly']

    # Options to tweak backtraces
    EXCEPTIONS_STORE_JAVA: [exceptions-store-java, boolean, false, Store the Java exception with the Ruby backtrace]
    EXCEPTIONS_PRINT_JAVA: [exceptions-print-java, boolean, false, Print Java exceptions at the point of translating them to Ruby exceptions]
    EXCEPTIONS_PRINT_UNCAUGHT_JAVA: [exceptions-print-uncaught-java, boolean, false, Print uncaught Java exceptions at the point of translating them to Ruby exceptions]
    EXCEPTIONS_PRINT_RUBY_FOR_JAVA: [exceptions-print-ruby-for-java, boolean, false, 'When printing a Java backtrace, also print the Ruby backtrace at that point']
    EXCEPTIONS_WARN_STACKOVERFLOW: [exceptions-warn-stackoverflow, boolean, true, Warn when a stack overflow error is thrown]
    EXCEPTIONS_WARN_OUT_OF_MEMORY: [exceptions-warn-out-of-memory, boolean, true, Warn when an out-of-memory error is thrown]
    BACKTRACES_INTERLEAVE_JAVA: [backtraces-interleave-java, boolean, false, Interleave Java stacktraces into the Ruby backtrace]
    BACKTRACES_OMIT_UNUSED: [backtraces-omit-unused, boolean, true, Omit backtraces that should be unused as they have pure rescue expressions]
    
    # Big Hash Strategy
    BIG_HASH_STRATEGY_IS_BUCKETS: [buckets-big-hash, boolean, true, 'Whether to use chaining-style buckets hash store for hash tables exceeding the small hash limit']

    # Print backtraces at key events
    BACKTRACE_ON_INTERRUPT: [backtraces-on-interrupt, boolean, false, Show the backtraces of all Threads on Ctrl+C]
    BACKTRACE_ON_SIGALRM: [backtraces-sigalrm, boolean, '!EMBEDDED', Show the backtraces of all Threads on SIGALRM]
    BACKTRACE_ON_RAISE: [backtraces-raise, boolean, false, Show the backtraces of exceptions at the point of them being raised]
    BACKTRACE_ON_RESCUE: [backtraces-rescue, boolean, false, Show the backtraces of exceptions at the point of them being rescued]
    BACKTRACE_ON_NEW_THREAD: [backtraces-new-thread, boolean, false, Show a backtrace when new threads are created]
    BACKTRACE_ON_NEW_FIBER: [backtraces-new-fiber, boolean, false, Show a backtrace when new fibers are created]

    # C extension options
    CEXTS: [cexts, boolean, true, Enable use of C extensions]
    CEXT_LOCK: [cexts-lock, boolean, true, Use a Global Lock when running C extensions]
    CEXTS_PANAMA: [cexts-panama, boolean, false, 'Use Panama for native to Ruby calls in C extensions. Only available in --jvm mode on JDK 22+.']

    # Debugging the values of options
    OPTIONS_LOG: [options-log, boolean, false, Log the final value of all options]

    # Tracing loading of Ruby files and C extensions
    LOG_LOAD: [log-load, boolean, false, Log loading files]
    LOG_AUTOLOAD: [log-autoload, boolean, false, Log autoloading]
    LOG_FEATURE_LOCATION: [log-feature-location, boolean, false, Log the process of finding features]
    METRICS_PROFILE_REQUIRE: [metrics-profile-require, enum/profile, none, 'Measure time for searching, parsing, translating and loading files.']
    CEXTS_LOG_LOAD: [cexts-log-load, boolean, false, Log loading of cexts]
    CEXTS_LOG_WARNINGS: [cexts-log-warnings, boolean, false, Log cexts warnings]

    WARN_DEPRECATED: [[warn-deprecated, -W], boolean, false, 'Sets the deprecated Warning category']
    WARN_EXPERIMENTAL: [[warn-experimental, -W], boolean, true, 'Sets the experimental Warning category']
    WARN_PERFORMANCE: [[warn-performance, -W], boolean, false, 'Sets the performance Warning category']

    # Controlling the regular expression engines
    USE_TRUFFLE_REGEX: [use-truffle-regex, boolean, true, 'Use the Truffle regular expression engine when possible and fallback to Joni otherwise']
    WARN_TRUFFLE_REGEX_COMPILE_FALLBACK: [warn-truffle-regex-compile-fallback, boolean, false, 'Warn when a Ruby Regexp could not be compiled to a Truffle Regex and Joni is used instead']
    WARN_TRUFFLE_REGEX_MATCH_FALLBACK: [warn-truffle-regex-match-fallback, boolean, false, 'Warn every time Truffle Regex cannot be used for a Regexp match (and instead Joni is used)']
    TRUFFLE_REGEX_IGNORE_ATOMIC_GROUPS: [truffle-regex-ignore-atomic-groups, boolean, false, 'Treat atomic groups (?>...) as ordinary groups (?:...) with Truffle Regex.']

    REUSE_PRECOMPILED_GEMS: [reuse-precompiled-gems, string-array, '<gem>,<gem>,...', 'A list of gems we want to install precompiled (using the local platform) on TruffleRuby. Can only be used for gem extensions which do not depend on the Ruby C API.']

INTERNAL: # Options for debugging the TruffleRuby implementation
  EXPERIMENTAL:
    # Options corresponding to MRI options, which are only meaningful when using the TruffleRuby launcher
    ARGV_GLOBALS: [[argv-globals, -s], boolean, false, Parse options in script argv into global variables]
    CHOMP_LOOP: [[chomp-loop, -l], boolean, false, 'enable line ending processing']
    GETS_LOOP: [[gets-loop, -n], boolean, false, 'assume while gets(); ... end loop around your script']
    PRINT_LOOP: [[print-loop, -p], boolean, false, 'assume loop like -n but print line also like sed']
    SPLIT_LOOP: [[split-loop, -a], boolean, false, 'autosplit mode with -n or -p (splits $_ into $F)']
    IGNORE_LINES_BEFORE_RUBY_SHEBANG: [[ignore-lines-before-ruby-shebang, -x], boolean, false, "strip off text before #!ruby line"]
    SYNTAX_CHECK: [[syntax-check, -c], boolean, false, Do not execute just check syntax]

    # Used internally for the launcher to communicate with the RubyContext
    ARGV_GLOBAL_VALUES: [argv-global-values, string-array, '<key>,<value>,...', Parsed options from script argv with a value]
    ARGV_GLOBAL_FLAGS: [argv-global-flags, string-array, '<flag>,<flag>,...', Parsed options from script argv acting as flags (no value)]
    BUILDING_CORE_CEXTS: [building-core-cexts, boolean, false, 'Used while building TruffleRuby to build default & bundled gems C extensions']

    # Low-level logging of implementation details
    LAZY_TRANSLATION_LOG: [lazy-translation-log, boolean, false, Log lazy translations from the parser AST to the Truffle AST]
    LOG_DYNAMIC_CONSTANT_LOOKUP: [constant-dynamic-lookup-log, boolean, false, Log source code positions where dynamic constant lookup is performed]
    LOG_PENDING_INTERRUPTS: [log-pending-interrupts, boolean, false, Log when executing pending interrupts]
    PRINT_INTERNED_TSTRING_STATS: [print-interned-tstring-stats, boolean, false, Print interned tstring stats at application exit]
    CEXTS_TO_NATIVE_STATS: [cexts-to-native-stats, boolean, false, Track the number of conversions of VALUEs to native and print the stats at application exit]
    CEXTS_TO_NATIVE_COUNT: [cexts-to-native-count, boolean, CEXTS_TO_NATIVE_STATS, Track the number of conversions of VALUEs to native]
    BACKTRACE_ON_TO_NATIVE: [backtraces-to-native, boolean, false, Show a backtrace when a ValueWrapper handle is created for a Ruby object]
    CEXTS_KEEP_HANDLES_ALIVE: [keep-handles-alive, boolean, false, Keep handles for value wrappers alive forever]
    # jt clean cexts && TRUFFLERUBYOPT="--experimental-options --cexts-sulong" jt build --env toolchain && TRUFFLERUBYOPT="--experimental-options --cexts-sulong" jt -u toolchain test :cext
    CEXTS_SULONG: [cexts-sulong, boolean, false, "Run C extensions on Sulong instead of natively, requires rebuilding TruffleRuby from source with this option"]

    # Options to debug the implementation
    LAZY_BUILTINS: [lazy-builtins, boolean, LAZY_CALLTARGETS, Load builtin classes (core methods & primitives) lazily on first use]
    LAZY_TRANSLATION_CORE: [lazy-translation-core, boolean, LAZY_CALLTARGETS, Lazily translation of core source files]
    CHAOS_DATA: [chaos-data, boolean, false, Randomize data representations to stress specialization code paths]
    INSTRUMENT_ALL_NODES: [instrument-all-nodes, boolean, false, 'Instrument all isInstrumentable() nodes, regardless of tags, to ensure instrumentation wrappers can be inserted']

    # Options to help debugging the implementation performance
    BASICOPS_INLINE: [basic-ops-inline, boolean, true, Inline basic operations (like Fixnum operators) in the AST without a call]
    BASICOPS_LOG_REWRITE: [basic-ops-log-rewrite, boolean, false, Log the receiver and arguments when basic operations like Fixnum operators cannot be handled inline]
    PROFILE_ARGUMENTS: [profile-arguments, boolean, true, Profile the value and class of the receiver and arguments]

    # Inline cache sizes
    DEFAULT_CACHE: [default-cache, integer, 8, Default size for caches]

    METHOD_LOOKUP_CACHE: [method-lookup-cache, integer, DEFAULT_CACHE, Method lookup cache size]
    DISPATCH_CACHE: [dispatch-cache, integer, DEFAULT_CACHE, Dispatch (various forms of method call) cache size]
    YIELD_CACHE: [yield-cache, integer, DEFAULT_CACHE, Yield cache size]
    IS_A_CACHE: [is-a-cache, integer, DEFAULT_CACHE, 'Kernel#is_a? and #kind_of? cache size']
    BIND_CACHE: [bind-cache, integer, DEFAULT_CACHE, Cache size of test for being able to bind a method to a module]
    CONSTANT_CACHE: [constant-cache, integer, DEFAULT_CACHE, Constant cache size]
    INSTANCE_VARIABLE_CACHE: [instance-variable-cache, integer, DEFAULT_CACHE, Instance variable cache size]
    BINDING_LOCAL_VARIABLE_CACHE: [binding-local-variable-cache, integer, DEFAULT_CACHE, Binding#local_variable_get/set cache size]
    SYMBOL_TO_PROC_CACHE: [symbol-to-proc-cache, integer, DEFAULT_CACHE, Symbol#to_proc cache size]
    PACK_CACHE: [pack-cache, integer, DEFAULT_CACHE, Array#pack cache size]
    UNPACK_CACHE: [unpack-cache, integer, DEFAULT_CACHE, String#unpack cache size]
    EVAL_CACHE: [eval-cache, integer, DEFAULT_CACHE, eval cache size]
    ENCODING_COMPATIBLE_QUERY_CACHE: [encoding-compatible-query-cache, integer, DEFAULT_CACHE, 'Encoding.compatible? cache size']
    ENCODING_LOADED_CLASSES_CACHE: [encoding-loaded-classes-cache, integer, DEFAULT_CACHE, Cache size of encoding operations based on anticipated number of total active encodings]
    INTEROP_CONVERT_CACHE: [interop-convert-cache, integer, DEFAULT_CACHE, Cache size for converting values for interop]
    TIME_FORMAT_CACHE: [time-format-cache, integer, DEFAULT_CACHE, Cache size for parsed time format specifiers]
    POW_CACHE: [integer-pow-cache, integer, DEFAULT_CACHE, Cache size for Integer#** with a constant exponent]

    # Inline caches with a non-default size. When adding a new option here, update test/truffle/integration/limit-zero.sh
    IDENTITY_CACHE: [identity-cache, integer, 1, Cache size for inline caches comparing by identity for context-independent objects]
    CONTEXT_SPECIFIC_IDENTITY_CACHE: [context-identity-cache, integer, ['!singleContext ? 0 : ', IDENTITY_CACHE], Cache size for inline caches comparing by identity for context-specific objects]
    CLASS_CACHE: [class-cache, integer, 3, .class and .metaclass cache size]
    ARRAY_DUP_CACHE: [array-dup-cache, integer, 3, Cache size for copying small arrays]
    ARRAY_STRATEGY_CACHE: [array-strategy-cache, integer, 4, Cache size for array strategies]

    # Other caching and optimization limits
    ARRAY_UNINITIALIZED_SIZE: [array-uninitialized-size, integer, 16, How large an Array to allocate when we have no other information to go on]
    ARRAY_SMALL: [array-small, integer, 3, Maximum size of an Array to consider small for optimisations]
    PACK_UNROLL_LIMIT: [pack-unroll, integer, 4, 'If a pack or unpack expression has a loop less than this many iterations, unroll it']
    PACK_RECOVER_LOOP_MIN: [pack-recover, integer, 32, 'If a pack or unpack expression is longer than this, attempt to recover loops']
    CEXTS_MARKING_CACHE: [cexts-marking-cache, integer, 100, 'Number of objects converted to native handles before the marking service is run']
    GLOBAL_VARIABLE_MAX_INVALIDATIONS: [global-variable-max-invalidations, integer, 1, Maximum number of times a global variable can be changed to be considered constant]

    # Splitting and cloning, useful for debugging cloning
    CLONE_DEFAULT: [clone-default, boolean, true, Default option for cloning]
    INLINE_DEFAULT: [inline-default, boolean, true, Default option for inlining]
    CORE_ALWAYS_CLONE: [core-always-clone, boolean, false, Always clone built-in core methods]
    ALWAYS_CLONE_ALL: [always-clone-all, boolean, false, 'Always clone all call targets (very slow, only for debugging)']
    ALWAYS_SPLIT_HONOR: [always-split-honor, boolean, CLONE_DEFAULT, 'Honor Truffle::Graal.always_split annotations']
    NEVER_SPLIT_HONOR: [never-split-honor, boolean, true, 'Honor Truffle::Graal.never_split annotations']
    YIELD_ALWAYS_INLINE: [yield-always-inline, boolean, INLINE_DEFAULT, Always inline yields]
    METHODMISSING_ALWAYS_CLONE: [method-missing-always-clone, boolean, CLONE_DEFAULT, 'Always clone #method_missing']
    METHODMISSING_ALWAYS_INLINE: [method-missing-always-inline, boolean, INLINE_DEFAULT, 'Always inline #method_missing']
    CHECK_CLONE_UNINITIALIZED_CORRECTNESS: [check-clone-uninitialized-correctness, boolean, false, 'Check whether #cloneUninitialized correctly clones a root node AST']

    # Instrumentation to debug performance
    REGEXP_INSTRUMENT_CREATION: [regexp-instrument-creation, boolean, false, Enable instrumentation to gather stats on regexp creation]
    REGEXP_INSTRUMENT_MATCH: [regexp-instrument-match, boolean, false, Enable instrumentation to gather stats on regexp matching]
    REGEXP_INSTRUMENT_MATCH_DETAILED: [regexp-instrument-match-detailed, boolean, false, Enable instrumentation to gather detailed stats on strings matched against a regexp]
    REGEXP_INSTRUMENT_OUTPUT_FORMAT: [regexp-instrumentation-output-format, enum/output_format, text, 'Output format for regexp instrumentation']

    # Options for metrics, the output cannot be used directly without processing
    METRICS_TIME_PARSING_FILE: [metrics-time-parsing-file, boolean, false, 'Measure time for parsing, translating and executing files, per file']
    METRICS_TIME_REQUIRE: [metrics-time-require, boolean, false, 'Measure time for #require and executing the required file']

    # Options to debug implementation and performance of thread-safe objects
    SHARED_OBJECTS_ENABLED: [shared-objects, boolean, true, Enable thread-safe objects]
    SHARED_OBJECTS_DEBUG: [shared-objects-debug, boolean, false, Print information about shared objects]
    SHARED_OBJECTS_FORCE: [shared-objects-force, boolean, false, Force sharing of objects roots at startup]

    # Options for testing
    TESTING_RUBYGEMS: [testing-rubygems, boolean, false, 'Indicates rubygems is being tested']
    RUN_TWICE: [run-twice, boolean, false, 'Run a workload twice using a shared engine in the same process']
    EXPERIMENTAL_ENGINE_CACHING: [experimental-engine-caching, boolean, RUN_TWICE, 'Enables experimental support for engine caching for TruffleRuby']

    # Options for the regular expression engines
    COMPARE_REGEX_ENGINES: [compare-regex-engines, boolean, false, 'Uses both Joni and the TRegex engine and compares their results']
