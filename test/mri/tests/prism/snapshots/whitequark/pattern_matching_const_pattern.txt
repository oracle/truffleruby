@ ProgramNode (location: (1,0)-(11,33))
├── flags: ∅
├── locals: [:x]
└── statements:
    @ StatementsNode (location: (1,0)-(11,33))
    ├── flags: ∅
    └── body: (length: 6)
        ├── @ CaseMatchNode (location: (1,0)-(1,31))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (1,5)-(1,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (1,5)-(1,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (1,10)-(1,26))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ ArrayPatternNode (location: (1,13)-(1,16))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (1,13)-(1,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :A
        │   │       │   ├── requireds: (length: 0)
        │   │       │   ├── rest: ∅
        │   │       │   ├── posts: (length: 0)
        │   │       │   ├── opening_loc: (1,14)-(1,15) = "("
        │   │       │   └── closing_loc: (1,15)-(1,16) = ")"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (1,22)-(1,26))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (1,22)-(1,26))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (1,10)-(1,12) = "in"
        │   │       └── then_loc: (1,17)-(1,21) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (1,0)-(1,4) = "case"
        │   └── end_keyword_loc: (1,28)-(1,31) = "end"
        ├── @ CaseMatchNode (location: (3,0)-(3,35))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (3,5)-(3,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (3,5)-(3,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (3,10)-(3,30))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ ArrayPatternNode (location: (3,13)-(3,20))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (3,13)-(3,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :A
        │   │       │   ├── requireds: (length: 2)
        │   │       │   │   ├── @ IntegerNode (location: (3,15)-(3,16))
        │   │       │   │   │   ├── flags: static_literal, decimal
        │   │       │   │   │   └── value: 1
        │   │       │   │   └── @ IntegerNode (location: (3,18)-(3,19))
        │   │       │   │       ├── flags: static_literal, decimal
        │   │       │   │       └── value: 2
        │   │       │   ├── rest: ∅
        │   │       │   ├── posts: (length: 0)
        │   │       │   ├── opening_loc: (3,14)-(3,15) = "("
        │   │       │   └── closing_loc: (3,19)-(3,20) = ")"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (3,26)-(3,30))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (3,26)-(3,30))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (3,10)-(3,12) = "in"
        │   │       └── then_loc: (3,21)-(3,25) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (3,0)-(3,4) = "case"
        │   └── end_keyword_loc: (3,32)-(3,35) = "end"
        ├── @ CaseMatchNode (location: (5,0)-(5,33))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (5,5)-(5,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (5,5)-(5,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (5,10)-(5,28))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ HashPatternNode (location: (5,13)-(5,18))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (5,13)-(5,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :A
        │   │       │   ├── elements: (length: 1)
        │   │       │   │   └── @ AssocNode (location: (5,15)-(5,17))
        │   │       │   │       ├── flags: ∅
        │   │       │   │       ├── key:
        │   │       │   │       │   @ SymbolNode (location: (5,15)-(5,17))
        │   │       │   │       │   ├── flags: static_literal, forced_us_ascii_encoding
        │   │       │   │       │   ├── opening_loc: ∅
        │   │       │   │       │   ├── value_loc: (5,15)-(5,16) = "x"
        │   │       │   │       │   ├── closing_loc: (5,16)-(5,17) = ":"
        │   │       │   │       │   └── unescaped: "x"
        │   │       │   │       ├── value:
        │   │       │   │       │   @ ImplicitNode (location: (5,15)-(5,16))
        │   │       │   │       │   ├── flags: ∅
        │   │       │   │       │   └── value:
        │   │       │   │       │       @ LocalVariableTargetNode (location: (5,15)-(5,16))
        │   │       │   │       │       ├── flags: ∅
        │   │       │   │       │       ├── name: :x
        │   │       │   │       │       └── depth: 0
        │   │       │   │       └── operator_loc: ∅
        │   │       │   ├── rest: ∅
        │   │       │   ├── opening_loc: (5,14)-(5,15) = "("
        │   │       │   └── closing_loc: (5,17)-(5,18) = ")"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (5,24)-(5,28))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (5,24)-(5,28))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (5,10)-(5,12) = "in"
        │   │       └── then_loc: (5,19)-(5,23) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (5,0)-(5,4) = "case"
        │   └── end_keyword_loc: (5,30)-(5,33) = "end"
        ├── @ CaseMatchNode (location: (7,0)-(7,35))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (7,5)-(7,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (7,5)-(7,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (7,10)-(7,30))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ ArrayPatternNode (location: (7,13)-(7,20))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (7,13)-(7,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :A
        │   │       │   ├── requireds: (length: 2)
        │   │       │   │   ├── @ IntegerNode (location: (7,15)-(7,16))
        │   │       │   │   │   ├── flags: static_literal, decimal
        │   │       │   │   │   └── value: 1
        │   │       │   │   └── @ IntegerNode (location: (7,18)-(7,19))
        │   │       │   │       ├── flags: static_literal, decimal
        │   │       │   │       └── value: 2
        │   │       │   ├── rest: ∅
        │   │       │   ├── posts: (length: 0)
        │   │       │   ├── opening_loc: (7,14)-(7,15) = "["
        │   │       │   └── closing_loc: (7,19)-(7,20) = "]"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (7,26)-(7,30))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (7,26)-(7,30))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (7,10)-(7,12) = "in"
        │   │       └── then_loc: (7,21)-(7,25) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (7,0)-(7,4) = "case"
        │   └── end_keyword_loc: (7,32)-(7,35) = "end"
        ├── @ CaseMatchNode (location: (9,0)-(9,31))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (9,5)-(9,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (9,5)-(9,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (9,10)-(9,26))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ ArrayPatternNode (location: (9,13)-(9,16))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (9,13)-(9,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :A
        │   │       │   ├── requireds: (length: 0)
        │   │       │   ├── rest: ∅
        │   │       │   ├── posts: (length: 0)
        │   │       │   ├── opening_loc: (9,14)-(9,15) = "["
        │   │       │   └── closing_loc: (9,15)-(9,16) = "]"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (9,22)-(9,26))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (9,22)-(9,26))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (9,10)-(9,12) = "in"
        │   │       └── then_loc: (9,17)-(9,21) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (9,0)-(9,4) = "case"
        │   └── end_keyword_loc: (9,28)-(9,31) = "end"
        └── @ CaseMatchNode (location: (11,0)-(11,33))
            ├── flags: newline
            ├── predicate:
            │   @ CallNode (location: (11,5)-(11,8))
            │   ├── flags: variable_call, ignore_visibility
            │   ├── receiver: ∅
            │   ├── call_operator_loc: ∅
            │   ├── name: :foo
            │   ├── message_loc: (11,5)-(11,8) = "foo"
            │   ├── opening_loc: ∅
            │   ├── arguments: ∅
            │   ├── closing_loc: ∅
            │   └── block: ∅
            ├── conditions: (length: 1)
            │   └── @ InNode (location: (11,10)-(11,28))
            │       ├── flags: ∅
            │       ├── pattern:
            │       │   @ HashPatternNode (location: (11,13)-(11,18))
            │       │   ├── flags: ∅
            │       │   ├── constant:
            │       │   │   @ ConstantReadNode (location: (11,13)-(11,14))
            │       │   │   ├── flags: ∅
            │       │   │   └── name: :A
            │       │   ├── elements: (length: 1)
            │       │   │   └── @ AssocNode (location: (11,15)-(11,17))
            │       │   │       ├── flags: ∅
            │       │   │       ├── key:
            │       │   │       │   @ SymbolNode (location: (11,15)-(11,17))
            │       │   │       │   ├── flags: static_literal, forced_us_ascii_encoding
            │       │   │       │   ├── opening_loc: ∅
            │       │   │       │   ├── value_loc: (11,15)-(11,16) = "x"
            │       │   │       │   ├── closing_loc: (11,16)-(11,17) = ":"
            │       │   │       │   └── unescaped: "x"
            │       │   │       ├── value:
            │       │   │       │   @ ImplicitNode (location: (11,15)-(11,16))
            │       │   │       │   ├── flags: ∅
            │       │   │       │   └── value:
            │       │   │       │       @ LocalVariableTargetNode (location: (11,15)-(11,16))
            │       │   │       │       ├── flags: ∅
            │       │   │       │       ├── name: :x
            │       │   │       │       └── depth: 0
            │       │   │       └── operator_loc: ∅
            │       │   ├── rest: ∅
            │       │   ├── opening_loc: (11,14)-(11,15) = "["
            │       │   └── closing_loc: (11,17)-(11,18) = "]"
            │       ├── statements:
            │       │   @ StatementsNode (location: (11,24)-(11,28))
            │       │   ├── flags: ∅
            │       │   └── body: (length: 1)
            │       │       └── @ TrueNode (location: (11,24)-(11,28))
            │       │           └── flags: newline, static_literal
            │       ├── in_loc: (11,10)-(11,12) = "in"
            │       └── then_loc: (11,19)-(11,23) = "then"
            ├── else_clause: ∅
            ├── case_keyword_loc: (11,0)-(11,4) = "case"
            └── end_keyword_loc: (11,30)-(11,33) = "end"
