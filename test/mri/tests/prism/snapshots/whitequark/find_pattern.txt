@ ProgramNode (location: (1,0)-(7,44))
├── flags: ∅
├── locals: [:x, :a, :y]
└── statements:
    @ StatementsNode (location: (1,0)-(7,44))
    ├── flags: ∅
    └── body: (length: 4)
        ├── @ CaseMatchNode (location: (1,0)-(1,36))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (1,5)-(1,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (1,5)-(1,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (1,10)-(1,31))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ FindPatternNode (location: (1,13)-(1,21))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant: ∅
        │   │       │   ├── left:
        │   │       │   │   @ SplatNode (location: (1,13)-(1,14))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (1,13)-(1,14) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── requireds: (length: 1)
        │   │       │   │   └── @ IntegerNode (location: (1,16)-(1,18))
        │   │       │   │       ├── flags: static_literal, decimal
        │   │       │   │       └── value: 42
        │   │       │   ├── right:
        │   │       │   │   @ SplatNode (location: (1,20)-(1,21))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (1,20)-(1,21) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── opening_loc: ∅
        │   │       │   └── closing_loc: ∅
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (1,27)-(1,31))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (1,27)-(1,31))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (1,10)-(1,12) = "in"
        │   │       └── then_loc: (1,22)-(1,26) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (1,0)-(1,4) = "case"
        │   └── end_keyword_loc: (1,33)-(1,36) = "end"
        ├── @ CaseMatchNode (location: (3,0)-(3,42))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (3,5)-(3,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (3,5)-(3,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (3,10)-(3,37))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ FindPatternNode (location: (3,13)-(3,27))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (3,13)-(3,18))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :Array
        │   │       │   ├── left:
        │   │       │   │   @ SplatNode (location: (3,19)-(3,20))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (3,19)-(3,20) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── requireds: (length: 1)
        │   │       │   │   └── @ IntegerNode (location: (3,22)-(3,23))
        │   │       │   │       ├── flags: static_literal, decimal
        │   │       │   │       └── value: 1
        │   │       │   ├── right:
        │   │       │   │   @ SplatNode (location: (3,25)-(3,26))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (3,25)-(3,26) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── opening_loc: (3,18)-(3,19) = "["
        │   │       │   └── closing_loc: (3,26)-(3,27) = "]"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (3,33)-(3,37))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (3,33)-(3,37))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (3,10)-(3,12) = "in"
        │   │       └── then_loc: (3,28)-(3,32) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (3,0)-(3,4) = "case"
        │   └── end_keyword_loc: (3,39)-(3,42) = "end"
        ├── @ CaseMatchNode (location: (5,0)-(5,43))
        │   ├── flags: newline
        │   ├── predicate:
        │   │   @ CallNode (location: (5,5)-(5,8))
        │   │   ├── flags: variable_call, ignore_visibility
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (5,5)-(5,8) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── conditions: (length: 1)
        │   │   └── @ InNode (location: (5,10)-(5,38))
        │   │       ├── flags: ∅
        │   │       ├── pattern:
        │   │       │   @ FindPatternNode (location: (5,13)-(5,28))
        │   │       │   ├── flags: ∅
        │   │       │   ├── constant:
        │   │       │   │   @ ConstantReadNode (location: (5,13)-(5,19))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   └── name: :String
        │   │       │   ├── left:
        │   │       │   │   @ SplatNode (location: (5,20)-(5,21))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (5,20)-(5,21) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── requireds: (length: 1)
        │   │       │   │   └── @ IntegerNode (location: (5,23)-(5,24))
        │   │       │   │       ├── flags: static_literal, decimal
        │   │       │   │       └── value: 1
        │   │       │   ├── right:
        │   │       │   │   @ SplatNode (location: (5,26)-(5,27))
        │   │       │   │   ├── flags: ∅
        │   │       │   │   ├── operator_loc: (5,26)-(5,27) = "*"
        │   │       │   │   └── expression: ∅
        │   │       │   ├── opening_loc: (5,19)-(5,20) = "("
        │   │       │   └── closing_loc: (5,27)-(5,28) = ")"
        │   │       ├── statements:
        │   │       │   @ StatementsNode (location: (5,34)-(5,38))
        │   │       │   ├── flags: ∅
        │   │       │   └── body: (length: 1)
        │   │       │       └── @ TrueNode (location: (5,34)-(5,38))
        │   │       │           └── flags: newline, static_literal
        │   │       ├── in_loc: (5,10)-(5,12) = "in"
        │   │       └── then_loc: (5,29)-(5,33) = "then"
        │   ├── else_clause: ∅
        │   ├── case_keyword_loc: (5,0)-(5,4) = "case"
        │   └── end_keyword_loc: (5,40)-(5,43) = "end"
        └── @ CaseMatchNode (location: (7,0)-(7,44))
            ├── flags: newline
            ├── predicate:
            │   @ CallNode (location: (7,5)-(7,8))
            │   ├── flags: variable_call, ignore_visibility
            │   ├── receiver: ∅
            │   ├── call_operator_loc: ∅
            │   ├── name: :foo
            │   ├── message_loc: (7,5)-(7,8) = "foo"
            │   ├── opening_loc: ∅
            │   ├── arguments: ∅
            │   ├── closing_loc: ∅
            │   └── block: ∅
            ├── conditions: (length: 1)
            │   └── @ InNode (location: (7,10)-(7,39))
            │       ├── flags: ∅
            │       ├── pattern:
            │       │   @ FindPatternNode (location: (7,13)-(7,29))
            │       │   ├── flags: ∅
            │       │   ├── constant: ∅
            │       │   ├── left:
            │       │   │   @ SplatNode (location: (7,14)-(7,16))
            │       │   │   ├── flags: ∅
            │       │   │   ├── operator_loc: (7,14)-(7,15) = "*"
            │       │   │   └── expression:
            │       │   │       @ LocalVariableTargetNode (location: (7,15)-(7,16))
            │       │   │       ├── flags: ∅
            │       │   │       ├── name: :x
            │       │   │       └── depth: 0
            │       │   ├── requireds: (length: 1)
            │       │   │   └── @ CapturePatternNode (location: (7,18)-(7,24))
            │       │   │       ├── flags: ∅
            │       │   │       ├── value:
            │       │   │       │   @ IntegerNode (location: (7,18)-(7,19))
            │       │   │       │   ├── flags: static_literal, decimal
            │       │   │       │   └── value: 1
            │       │   │       ├── target:
            │       │   │       │   @ LocalVariableTargetNode (location: (7,23)-(7,24))
            │       │   │       │   ├── flags: ∅
            │       │   │       │   ├── name: :a
            │       │   │       │   └── depth: 0
            │       │   │       └── operator_loc: (7,20)-(7,22) = "=>"
            │       │   ├── right:
            │       │   │   @ SplatNode (location: (7,26)-(7,28))
            │       │   │   ├── flags: ∅
            │       │   │   ├── operator_loc: (7,26)-(7,27) = "*"
            │       │   │   └── expression:
            │       │   │       @ LocalVariableTargetNode (location: (7,27)-(7,28))
            │       │   │       ├── flags: ∅
            │       │   │       ├── name: :y
            │       │   │       └── depth: 0
            │       │   ├── opening_loc: (7,13)-(7,14) = "["
            │       │   └── closing_loc: (7,28)-(7,29) = "]"
            │       ├── statements:
            │       │   @ StatementsNode (location: (7,35)-(7,39))
            │       │   ├── flags: ∅
            │       │   └── body: (length: 1)
            │       │       └── @ TrueNode (location: (7,35)-(7,39))
            │       │           └── flags: newline, static_literal
            │       ├── in_loc: (7,10)-(7,12) = "in"
            │       └── then_loc: (7,30)-(7,34) = "then"
            ├── else_clause: ∅
            ├── case_keyword_loc: (7,0)-(7,4) = "case"
            └── end_keyword_loc: (7,41)-(7,44) = "end"
